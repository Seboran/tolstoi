import type { Component } from '../declarations'
import { h } from '../framework/vdom'

const frameworkDescriptions: Record<string, string> = {
  vue: "Vue.js - Un framework progressif qui combine simplicit√© et puissance. Parfait pour ceux qui aiment l'√©quilibre entre facilit√© d'apprentissage et fonctionnalit√©s avanc√©es.",
  reactjs:
    "React.js - La biblioth√®que de Facebook pour construire des interfaces utilisateur. Id√©al pour ceux qui aiment l'√©cosyst√®me riche et la flexibilit√©.",
  angular:
    "Angular - Le framework complet de Google avec TypeScript par d√©faut. Parfait pour les applications d'entreprise complexes.",
  astro:
    'Astro - Le framework moderne pour des sites rapides. Id√©al pour ceux qui privil√©gient les performances et le rendu statique.',
  solidjs:
    'Solid.js - La r√©activit√© fine sans DOM virtuel. Parfait pour ceux qui veulent des performances maximales avec une syntaxe famili√®re.',
  svelte:
    'Svelte - Le framework qui compile vers du JavaScript vanilla. Id√©al pour ceux qui veulent simplicit√© et performances.',
  qwik: "Qwik - L'architecture resumable pour des applications instantan√©es. Parfait pour ceux qui veulent des temps de chargement ultra-rapides.",
  alpine:
    "Alpine.js - Le jQuery moderne pour ajouter de l'interactivit√©. Id√©al pour am√©liorer progressivement des sites existants.",
  htmx: "HTMX - L'interactivit√© HTML native. Parfait pour ceux qui pr√©f√®rent rester proche du web platform.",
  ember:
    'Ember.js - Le framework avec des conventions fortes. Id√©al pour les √©quipes qui aiment la structure et la productivit√©.',
  stencil:
    'Stencil - Le compilateur pour Web Components. Parfait pour cr√©er des composants r√©utilisables et standards.',
  'vanilla js':
    'Vanilla JavaScript - Le langage du web dans sa forme la plus pure. Parfait pour ceux qui pr√©f√®rent le contr√¥le total, la simplicit√© et la compr√©hension profonde du fonctionnement du web.',
}

export const Results: Component<{
  framework: string
  onRestart: () => void
}> = ({ framework, onRestart }) => {
  // Check if native sharing is supported - requires secure context (HTTPS)
  const isNativeShareSupported = () => {
    return (
      typeof navigator !== 'undefined' &&
      'share' in navigator &&
      typeof navigator.share === 'function' &&
      window.isSecureContext // Required for Web Share API
    )
  }

  // Check if we're on mobile
  const isMobile = () => {
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
  }

  const shareResults = async () => {
    const shareText = `J'ai fait le test de personnalit√© des frameworks JavaScript ! Mon framework id√©al est ${framework} ! üöÄ`

    // Construct the share data according to Web Share API spec
    const shareData = {
      title: 'Test de Personnalit√© - R√©sultats',
      text: shareText,
      url: window.location.href,
    }

    // Check if sharing is supported and validate the data first
    if (!isNativeShareSupported()) {
      console.log('Web Share API not supported')
      return
    }

    // Validate share data before attempting to share (required by spec)
    if (navigator.canShare && !navigator.canShare(shareData)) {
      console.log('Share data is not valid for this platform')
      return
    }

    try {
      await navigator.share(shareData)
      console.log('Share successful')
    } catch (error) {
      // Handle specific error cases as per spec
      if (error.name === 'AbortError') {
        console.log('Share cancelled by user')
      } else if (error.name === 'NotAllowedError') {
        console.log('Share not allowed (user gesture required or permissions)')
      } else if (error.name === 'DataError') {
        console.log('Share data error')
      } else {
        console.log('Share failed:', error.name, error.message)
      }
    }
  }

  const shareToBluesky = () => {
    const shareText = `J'ai fait le test de personnalit√© des frameworks JavaScript ! Mon framework id√©al est ${framework} ! üöÄ @nirinarabeson.fr`
    const shareUrl = window.location.href
    const blueskyUrl = `https://bsky.app/intent/compose?text=${encodeURIComponent(shareText + '\n\n' + shareUrl)}`
    window.open(blueskyUrl, '_blank')
  }

  return (
    <div class="results-container">
      <h2>Votre framework id√©al est :</h2>
      <div class="result-framework">{framework}</div>
      <p class="result-description">
        {frameworkDescriptions[framework] || 'Un excellent choix pour vos projets web !'}
      </p>
      <button class="restart-button" onclick={onRestart}>
        Refaire le test
      </button>

      {/* Share buttons - always show on mobile, prioritize native iOS sharing */}
      <div class="share-section">
        <h4>Partager vos r√©sultats :</h4>
        <div class="share-buttons">
          {isMobile() && (
            <button class="share-button native-share" onclick={shareResults}>
              üì± Partager
            </button>
          )}

          <button class="share-button bluesky-share" onclick={shareToBluesky}>
            ü¶ã Bluesky
          </button>
        </div>
      </div>
    </div>
  )
}
